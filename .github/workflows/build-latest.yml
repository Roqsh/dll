name: Build Flarial dll and add to newcdn as a release
on:
  push:
    branches: [ "main", "scripting-v2", "**" ]  # Allow all branches
    tags:
      - 'beta-*'
      - 'release-*'
  pull_request:
    branches: [ "main", "scripting-v2" ]
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  windows-build:
    runs-on: windows-latest
    outputs:
      type: ${{ steps.type.outputs.status }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: "Check commit type"
        id: type
        run: |
          # Check for reset-cache tag
          if [[ "${{ github.event.head_commit.message }}" == *"reset-cache:"* ]]; then
              echo "Cache reset requested"
              echo "reset_cache=true" >> "$GITHUB_OUTPUT"
          else
              echo "reset_cache=false" >> "$GITHUB_OUTPUT"
          fi
          
          # Check if we're on main or scripting-v2 branch
          if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "scripting-v2" ]]; then
              # Main branches can use all build types
              if [[ "${{ github.ref_type }}" == "tag" ]]; then
                  if [[ "${{ github.ref_name }}" == beta-* ]]; then
                      echo "Continuing to build as beta (tag)"
                      echo "status=2" >> "$GITHUB_OUTPUT"
                  elif [[ "${{ github.ref_name }}" == release-* ]]; then
                      echo "Continuing to build as release (tag)"
                      echo "status=1" >> "$GITHUB_OUTPUT"
                  else
                      echo "Unknown tag type, exiting"
                      gh run cancel ${{ github.run_id }}
                      gh run watch ${{ github.run_id }}f
                      exit 0
                  fi
              elif [[ "${{ github.event.head_commit.message }}" == *"nightly:"* ]]; then
                  echo "Continuing to build as nightly"
                  echo "status=0" >> "$GITHUB_OUTPUT"
              elif [[ "${{ github.event.head_commit.message }}" == *"release:"* ]]; then
                  echo "Continuing to build as release"
                  echo "status=1" >> "$GITHUB_OUTPUT"
              elif [[ "${{ github.event.head_commit.message }}" == *"beta:"* ]]; then
                  echo "Continuing to build as beta"
                  echo "status=2" >> "$GITHUB_OUTPUT"
              else
                  echo "Not a build commit, exiting"
                  gh run cancel ${{ github.run_id }}
                  gh run watch ${{ github.run_id }}f
                  exit 0
              fi
          else
              # Other branches can only use nightly builds
              if [[ "${{ github.event.head_commit.message }}" == *"nightly:"* ]]; then
                  echo "Branch '${{ github.ref_name }}' building as nightly"
                  echo "status=0" >> "$GITHUB_OUTPUT"
              else
                  echo "Branch '${{ github.ref_name }}' can only build with 'nightly:' prefix. Exiting."
                  gh run cancel ${{ github.run_id }}
                  gh run watch ${{ github.run_id }}f
                  exit 0
              fi
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Up MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install sccache
        run: |
          Invoke-WebRequest -Uri "https://github.com/mozilla/sccache/releases/download/v0.7.4/sccache-v0.7.4-x86_64-pc-windows-msvc.tar.gz" -OutFile "sccache.tar.gz"
          tar -xzf sccache.tar.gz
          move sccache-*/sccache.exe .
          echo "$PWD" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ runner.os }}-${{ steps.type.outputs.reset_cache == 'true' && github.run_number || 'normal' }}-${{ github.sha }}
          restore-keys: |
            ${{ steps.type.outputs.reset_cache == 'false' && format('sccache-{0}-normal-', runner.os) || '' }}

      - name: Cache CMake dependencies
        uses: actions/cache@v4
        with:
          path: |
            _deps
            build/_deps
          key: cmake-deps-${{ runner.os }}-${{ steps.type.outputs.reset_cache == 'true' && github.run_number || 'normal' }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ steps.type.outputs.reset_cache == 'false' && format('cmake-deps-{0}-normal-', runner.os) || '' }}

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build
            build/**/*.obj
            build/**/*.pdb
            build/**/*.lib
            build/**/*.dll
            build/**/*.exe
            build/CMakeFiles
          key: cmake-build-${{ runner.os }}-${{ steps.type.outputs.reset_cache == 'true' && github.run_number || 'normal' }}-${{ github.sha }}-${{ hashFiles('CMakeLists.txt', 'src/**/*.cpp', 'src/**/*.hpp', 'src/**/*.h') }}
          restore-keys: |
            ${{ steps.type.outputs.reset_cache == 'false' && format('cmake-build-{0}-normal-{1}-', runner.os, github.sha) || '' }}
            ${{ steps.type.outputs.reset_cache == 'false' && format('cmake-build-{0}-normal-', runner.os) || '' }}

      - name: Configure CMake
        run: |
          cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DFETCHCONTENT_FULLY_DISCONNECTED=OFF -DCMAKE_BUILD_PARALLEL_LEVEL=4 -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
        env:
          SCCACHE_DIR: ~/.cache/sccache


      - name: Build DLL
        run: |
           sccache --start-server
           cmake --build build --target Flarial --parallel 4
           sccache --show-stats
        env:
          SCCACHE_DIR: ~/.cache/sccache
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
           name: Flarial_DLL
           path: C:\a\dll\dll\build\Flarial.dll

  upload-to-cdn:
    runs-on: ubuntu-latest
    needs: windows-build
    steps:
      - name: Output commit type
        run: echo " ${{env.OUTPUT1}} $OUTPUT1"
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
      - name: Checkout newcdn repository
        uses: actions/checkout@v4
        with:
          repository: 'flarialmc/newcdn'
          ref: 'main'
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
      - name: Download dll
        uses: actions/download-artifact@v4.1.9
      - name: setup tags
        id: tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "TAG_NAME=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ env.OUTPUT1 }}" == "0" ]]; then
            echo "TAG_NAME=nightly-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ env.OUTPUT1 }}" == "1" ]]; then
            echo "TAG_NAME=release-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ env.OUTPUT1 }}" == "2" ]]; then
            echo "TAG_NAME=beta-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
      - name: Nightly Release (CDN)
        uses: softprops/action-gh-release@v2
        with:
          files:
            Flarial_DLL/Flarial.dll
          tag_name: ${{ env.TAG_NAME}}
          body: ${{ github.event.head_commit.message }}
          name: "Nightly Release"
          repository: flarialmc/newcdn
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        if: ${{ env.OUTPUT1 == 0 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Nightly Release (Main Repo)
        uses: softprops/action-gh-release@v2
        with:
          files:
            Flarial_DLL/Flarial.dll
          tag_name: ${{ env.TAG_NAME}}
          body: ${{ github.event.head_commit.message }}
          name: "Nightly Release"
          token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ env.OUTPUT1 == 0 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Release (CDN) - File Upload
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
          mv -f Flarial_DLL/Flarial.dll "./dll/latest.dll"
          git add ./dll/latest.dll
          git commit -m "Add Release for Release Commit: '${{ github.event.head_commit.message }}'"
          git push origin main
          echo "uploading as release"
        if: ${{ env.OUTPUT1 == 1 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Release (CDN) - GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files:
            Flarial_DLL/Flarial.dll
          tag_name: ${{ env.TAG_NAME}}
          body: ${{ github.event.head_commit.message }}
          name: "Release"
          repository: flarialmc/newcdn
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        if: ${{ env.OUTPUT1 == 1 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Release (Main Repo)
        uses: softprops/action-gh-release@v2
        with:
          files:
            Flarial_DLL/Flarial.dll
          tag_name: ${{ env.TAG_NAME}}
          body: ${{ github.event.head_commit.message }}
          name: "Release"
          token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ env.OUTPUT1 == 1 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Beta Release (CDN) - File Upload
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
          mv -f Flarial_DLL/Flarial.dll "./dll/beta.dll"
          git add ./dll/beta.dll
          git commit -m "Add Beta for Beta Commit: '${{ github.event.head_commit.message }}'"
          git push origin main
          echo "uploading as beta"
        if: ${{ env.OUTPUT1 == 2 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Beta Release (CDN) - GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files:
            Flarial_DLL/Flarial.dll
          tag_name: ${{ env.TAG_NAME}}
          body: ${{ github.event.head_commit.message }}
          name: "Beta Release"
          repository: flarialmc/newcdn
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        if: ${{ env.OUTPUT1 == 2 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Beta Release (Main Repo)
        uses: softprops/action-gh-release@v2
        with:
          files:
            Flarial_DLL/Flarial.dll
          tag_name: ${{ env.TAG_NAME}}
          body: ${{ github.event.head_commit.message }}
          name: "Beta Release"
          token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ env.OUTPUT1 == 2 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
      - name: Cache Github API
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
          curl https://api.github.com/repos/TTF-fog/newcdn/tags > cache.txt
  
          git add cache.txt
          git commit -m "Add Cache for Tags (API)"
          git push origin main
        if: ${{ env.OUTPUT1 == 0 }}
        env:
          OUTPUT1: ${{ needs.windows-build.outputs.type}}
          TAG_NAME: ${{ steps.tag.outputs.TAG_NAME }}
